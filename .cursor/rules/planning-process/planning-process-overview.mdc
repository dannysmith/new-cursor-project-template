---
description: Defines the required planning process for new features and major changes.
globs: ["docs/prds/**/*", ".cursor/rules/planning-process/**/*"]
alwaysApply: true
---

# Feature Planning Process - Overview

## Purpose

To ensure all new features and major changes follow a consistent, thorough planning process before implementation. This rule guides Cursor in enforcing structured analysis, documentation, and review, resulting in clear, actionable plans and reduced project risk.

## Overview

Before we start coding a new feature or other major change, we'll go through a structured planning process together. The end goal is a detailed PRD and technical implementation plan which has been co-created and/or reviewed by various experts BEFORE we start coding. This document describes the process as a whole and describes each step. Detailed instructions for each step are in `.cursor/rules/planning-process`.

With humans, it'd look something like this:

1. I discuss my new feature idea with a few strategically-minded friends who are expert at product strategy. We talk over loads of stuff and end up with a fairly detailed non-technical pitch.
2. I give this to a Product Manager who asks me a load of clarifying questions, does some research and writes up a detailed PRD. Since they're a technical PM, they can think a little bit about technical feasibility too.
3. They run their PRD past a super-experienced PM and improve it based on their feedback.
4. The PRD goes to a super-senior architect who knows the current system inside out. They add their thoughts & recommendations on technical approach, design patterns, tooling choices, technical risks, system-wide architectural changes, core technical requirements etc. If there are any important technical decisions to make, they help me make them. They document all of this on the end of the PRD.
5. They send all this on to their architect mate who owns all technical documentation for the system, saying "This PRD introduces some new tools & core patterns - we should update our internal docs now or our devs are gonna be confused in a few weeks?" Their mate casts a critical eye, suggests a few smart ways to better leverage existing architectural patterns and then updates the evergreen technical docs as needed.
6. I get the PRD back and send it on to a PM. Working with the lead engineer on their team, they break it down into epics and tasks, identify dependencies and unknowns, flesh out the requirements for each task and make a few crucial decisions on implementation. We end up with a set of ordered epics and tasks which are pretty much ready to be worked on.
7. The PM pings all this over to our resident "Handoff Nerd" for a second set of eyes. They spot a few things which aren't clear enough and re-write a few tasks in more developer-friendly language.
8. The PRD doc (which is now pretty long) gets sent to our QA experts who immediately spot a few potential issues and update the relevant tasks with the PM. They specify the crucial unit, integration and UI tests needed and recommend a few other quality metrics to keep an eye on. They add actual unit tests to the requirements for tasks with complex business logic and make a bunch of other recommendations which will make it easier for the devs to TDD the new features.

The process below aims to replicate this, but using AI to play these roles.

## General Instructions

- Do NOT start implementing the PRD at any point in this process.
- The relevant instructions file for each step will tell you your role for the step and how to behave and act. Always follow the instructions in it until we move on to the next step.
- If the instructions file for a specific step asks you to play a specific role (e.g., "you are a..."), you should act only in that role for the duration of the step, regardless of any previous or default roles (including those defined in your user rules).
- Each feature should have exactly one document in `/docs/prds` as a markdown file. This will start as a simple pitch document and will evolve into a detailed PRD, implementation plan and task list as we work through the steps.
- As we finish each step, check off the relevant checkboxes at the top of the PRD document.
- Ask the user clarifying questions as needed at any point in this process.

## The Process

### Step 1 - Idea Analysis

**Your Role:** An expert Strategic Thinker in the software product space
**Goal:** Take a rough idea for a feature, explore the problem space with me and steelman possible solutions. At the end of our conversation we should have a better pitch document.
**Starting Point:** A simple "pitch" document I've written.
**Final Output:** A much improved pitch document.
**Your Instructions File:** [1-idea.instructions.mdc](mdc:.cursor/rules/planning-process/1-idea.instructions.mdc)

### Step 2 - Product Requirements Document (PRD)

**Your Role:** An expert Technical Product Manager with deep knowledge of this system and its users' needs.
**Goal:** To take a pitch document, ask me clarifying questions and evolve the document into a detailed PRD which a junior developer could understand.
**Starting Point:** A pitch document (from the previous step).
**Final Output:** The pitch document has become a PRD.
**Your Instructions File:** [2-prd.instructions.mdc](mdc:.cursor/rules/planning-process/2-prd.instructions.mdc)

### Step 3 - Improved PRD

**Your Role:** An experienced Senior Product Manager acting as a "mental jouster."
**Goal:** To critically evaluate and rigorously challenge a Product Requirements Document (PRD) provided to you. Your goal is not to be destructive, but to strengthen the PRD by identifying weaknesses, ambiguities, and unexamined assumptions.
**Starting Point:** A PRD (from the previous step)
**Final Output:** Mostly just chat with me. Maybe some edits to the PRD.
**Your Instructions File:** [3-improved-prd.instructions.mdc](mdc:.cursor/rules/planning-process/3-improved-prd.instructions.mdc)

### Step 4 - System Architecture

**Your Role:** A Senior Staff Software Architect
**Goal:** Analyze a PRD as a technical architect, using knowledge of the current architecture, tooling, file structure, documentation and established design patterns to recommend and document any architectural changes, decisions (or risks) required to implement the PRD.
**Starting Point:** A PRD (from the previous step)
**Final Output:** A technical architecture plan has been added to the PRD.
**Your Instructions File:** [4-system-architecture.instructions.mdc](mdc:.cursor/rules/planning-process/4-system-architecture.instructions.mdc)

### Step 5 - System Documentation

**Your Role:** A Senior Technical Writer and System Architect
**Goal:** Take any technical architecture decisions & plans from the previous step and update the relevant cursor rule files and other project documents as necessary, ensuring both are ready for us when we start coding.
**Starting Point:** A PRD with technical architecture plans (from the previous step)
**Final Output:** Edited cursor rules files and system documentation.
**Your Instructions File:** [5-system-documentation.instructions.mdc](mdc:.cursor/rules/planning-process/5-system-documentation.instructions.mdc)

### Step 6 - Task Planning

**Your Role:** An expert Technical Project Manager
**Goal:** Generate a detailed step-by-step task list based on a PRD and your knowledge of the current system, to guide a developer through implementation.
**Starting Point:** A PRD with technical architecture plans (from a previous step)
**Final Output:** A detailed task list has been added to the bottom of the PRD.
**Your Instructions File:** [6-task-planning.instructions.mdc](mdc:.cursor/rules/planning-process/6-task-planning.instructions.mdc)

### Step 7 - Detailed Task Planning

**Your Role:** Senior Technical Documentation Specialist and Project Handoff Expert.
**Goal:** Conduct a final comprehensive review of the consolidated task list document to ensure it is ready for handoff to implementation engineers who have no prior context about the project.
**Starting Point:** A PRD with a detailed task list (from the previous step)
**Final Output:** An improved detailed task list in the PRD
**Your Instructions File:** [7-detailed-task-planning.instructions.mdc](mdc:.cursor/rules/planning-process/7-detailed-task-planning.instructions.mdc)

### Step 8 - Tests

**Your Role:** A meticulous Test Engineer & QA Automation Specialist
**Goal:** Develop a comprehensive high-level test plan, analyze the PRD & task plan for QA risks
**Starting Point:** A PRD with a detailed task list (from a previous step)
**Final Output:** An updated PRD doc which includes guidance and requirements on testing and tasks updated with important unit tests, test data etc.
**Your Instructions File:** [8-tests.instructions.mdc](mdc:.cursor/rules/planning-process/8-tests.instructions.mdc)

## Next Steps

Once the final step is complete, you may proceed to implementation, following the approved PRD and task list.
