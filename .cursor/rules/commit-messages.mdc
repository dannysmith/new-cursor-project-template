---
description: Guidelines for writing clear and consistent commit messages
globs: ["**/*"]
alwaysApply: true
---

# Commit Message Guidelines

## Purpose

Define a clear and consistent format for writing commit messages that makes it easy to understand what changes were made and why.

## Background

We use the Conventional Commits 1.0.0 standard, with a few modifications. The full standard is at [conventional-commits.md](mdc:docs/conventional-commits.md). Where the additional guidance and rules I have provided here conflict with those of Conventional Commits always give preference to my rules.

## Format

```
[optional type[optional scope]:] <description>

[optional body]

[optional footer(s)]
```

## Description

The description (or "subject line") is the most important part of the commit message, and in many cases the only part. It must clearly describe the "what" of the change (and the "why" when non-obvious) in a way that makes it easy to scan a long list of commits and quickly understand what's been happening.

- Always use the imperative, present tense for the description (eg. "change" not "changed" nor "changes").
- Describe the what and why, not how.
- Do not use more than one sentence for the description.
- Keep the description as simple and short as possible, but not so short that it loses meaning.
- Do not include the optional parts unnecessarily.
- Limit the description to 50 characters for readability. Keep it as short as possible, but not so short that it loses meaning.
- Capitalize the first word of the description and never end it with a period.

## Type (optional in some cases)

The types we use are:

- `feat`: Fully complete new features
- `fix`: Bug fixes
- `docs`: Changes which only affect documentation
- `chore`: Changes to the build process, auxiliary tools, dependency upgrades etc
- `revert`: Commits to revert other commits.
- `refactor`: Refactorings which do not alter the functionality of the product.

While the Conventional Commits standard mandates a `<type>` prefix, we only require it for `chore`, `docs`, and `revert` commits. For other changes (such as features and fixes), the type prefix is optional, but recommended for clarity.

## Scope (optional)

A scope may be provided after a type to clarify the area of the codebase affected. Use a scope when it helps quickly identify the context of the change. WE DO NOT ROUTINELY USE SCOPES.

Example: `feat(auth): Add login endpoint`

## Body (optional)

More detailed explanatory text, if necessary.

- Wrap body lines at 72 characters for readability in most tools. The subject line should be limited to 50 characters.
- Use the imperative, present tense
- Include motivation for the change and contrast with previous behavior as needed.
- Bullet points are ok if you think they make sense.

## Footer (optional)

- Reference any issues or pull requests as needed. Format: `Fixes #123` or `Closes #456`.

## Some Examples

```
feat: Add dark mode toggle

Adds a new button in the header to switch between light and dark themes.
Uses CSS variables for theming and persists user preference in localStorage.

Closes #123
```

```
fix: Resolve image loading in note cards

Images were not loading properly in note cards due to incorrect path resolution.
Added proper path handling for both local and remote images.

Fixes #456
```

```
docs: Update component guidelines

Updates the component guidelines to reflect current best practices and
implementation patterns. Adds examples from existing components.

Closes #789
```

## Best Practices

1. **Be Specific**

   - Clearly describe what changed
   - Explain why the change was made
   - Reference related issues or PRs

2. **Keep it Simple**

   - Use simple, clear language
   - Focus on the "what" and "why"

3. **Be Consistent**

   - Follow the format
   - Use the same tense
   - Maintain the same style

4. **Review Before Committing**
   - Check the message format
   - Verify the content is clear
   - Ensure all necessary information is included
